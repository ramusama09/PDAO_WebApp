@page
@model PDAO_WebApp.Pages.ID_Cards.ID_IndexModel
@{
    ViewData["Title"] = "PWD ID Card Management";
}

<link rel="stylesheet" href="~/css/id_index.css" asp-append-version="true" />
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
<script src="~/js/github-config.js"></script>

<div class="id-index-hero py-5 mb-4" style="background: linear-gradient(90deg, var(--light-green) 0%, var(--green) 100%); color: white; border-radius: 0 0 2rem 2rem;">
    <div class="container d-flex flex-column align-items-center justify-content-center">
        <i class="bi bi-person-badge-fill display-3 mb-2" style="color: var(--yellow);"></i>
        <h1 class="fw-bold mb-2" style="letter-spacing: 1px;">PWD ID Card Management</h1>
        <p class="lead mb-0" style="max-width: 600px;">Easily view, print, and manage your Para√±aque PWD ID card. Stay updated on your card status and renew before it expires!</p>
    </div>
</div>

<div class="container mb-5">
    @if (!string.IsNullOrEmpty(Model.StatusMessage))
    {
        var statusMessageClass = Model.StatusMessage.StartsWith("Error") ? "danger" : "success";
        <div class="alert alert-@statusMessageClass alert-dismissible fade show" role="alert">
            @Model.StatusMessage
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    <div class="row g-4">
        <div class="col-lg-8">
            <div class="card shadow-lg border-0 rounded-4">
                <div class="card-body p-4">
                    <h3 class="card-title mb-4 d-flex align-items-center gap-2" style="color: var(--dark-green);">
                        <i class="bi bi-card-heading"></i> Your PWD ID Card
                    </h3>
                    <div id="idCardDisplay" class="">
                        <div class="row">
                            <div class="col-12">
                                <div class="card border-0 shadow-sm rounded-4 mb-0">
                                    <div class="card-header bg-white border-0 pb-0">
                                        <ul class="nav nav-tabs card-header-tabs justify-content-center" id="idCardTabs" role="tablist">
                                            <li class="nav-item" role="presentation">
                                                <button class="nav-link active" id="status-tab" data-bs-toggle="tab" data-bs-target="#status-tab-pane" type="button" role="tab" aria-selected="true">
                                                    <i class="bi bi-info-circle-fill me-1"></i> ID Status
                                                </button>
                                            </li>
                                            <li class="nav-item" role="presentation">
                                                <button class="nav-link" id="front-tab" data-bs-toggle="tab" data-bs-target="#front-tab-pane" type="button" role="tab" aria-selected="false">
                                                    <i class="bi bi-card-image me-1"></i> Front ID
                                                </button>
                                            </li>
                                            <li class="nav-item" role="presentation">
                                                <button class="nav-link" id="back-tab" data-bs-toggle="tab" data-bs-target="#back-tab-pane" type="button" role="tab" aria-selected="false">
                                                    <i class="bi bi-card-image me-1"></i> Back ID
                                                </button>
                                            </li>
                                        </ul>
                                    </div>
                                    <div class="card-body p-0">
                                        <div class="tab-content" id="idCardTabContent">
                                            <div class="tab-pane fade show active" id="status-tab-pane" role="tabpanel" aria-labelledby="status-tab" tabindex="0">
                                                <div id="idCardStatus" class="id-card-status">
                                                    <div class="loading-spinner">
                                                        <div class="spinner-border text-primary" role="status">
                                                            <span class="visually-hidden">Loading...</span>
                                                        </div>
                                                        <p class="mt-2">Checking ID card status...</p>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="tab-pane fade" id="front-tab-pane" role="tabpanel" aria-labelledby="front-tab" tabindex="0">
                                                <div id="frontCardPreview" class="id-card-preview"></div>
                                            </div>
                                            <div class="tab-pane fade" id="back-tab-pane" role="tabpanel" aria-labelledby="back-tab" tabindex="0">
                                                <div id="backCardPreview" class="id-card-preview"></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-4">
            <div class="card shadow-lg border-0 rounded-4 h-100">
                <div class="card-body p-4 d-flex flex-column justify-content-between h-100">
                    <h4 class="card-title mb-3 d-flex align-items-center gap-2" style="color: var(--green);">
                        <i class="bi bi-person-lines-fill"></i> ID Card Information
                    </h4>
                    <div id="idCardInfo" class="mb-4">
                        <p class="text-muted">No ID card information available.</p>
                    </div>
                    <div id="idCardActions" class="mt-auto">
                        <div class="d-flex flex-column gap-3">
                            <a href="/ID_Cards/ID_Create" class="btn btn-lg fw-bold" id="createUpdateBtn" style="background: var(--green); color: white;">
                                <i class="bi bi-plus-circle me-2" id="createUpdateIcon"></i> <span id="createUpdateText">Create New ID Card</span>
                            </a>
                            <button class="btn btn-outline-warning btn-lg fw-bold" id="printIdBtn" style="border-color: var(--yellow); color: var(--dark-green);">
                                <i class="bi bi-printer me-2"></i> Print ID Card
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Print Container (hidden by default, only for printing) -->
<div id="printContainer" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: white; z-index: 9999;">
    <div class="print-row">
        <div class="print-card-container">
            <div class="print-id-card">
                <img id="printFrontImg" alt="Front ID Card">
            </div>
        </div>
        <div class="print-card-container">
            <div class="print-id-card">
                <img id="printBackImg" alt="Back ID Card">
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/id-index.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Check authentication state
            auth.onAuthStateChanged(async (user) => {
                if (!user) {
                    window.location.href = '/Identity/Login';
                    return;
                }

                try {
                    // Get user data from Firebase
                    const userSnapshot = await database.ref(`users/${user.uid}`).once('value');
                    const userData = userSnapshot.val();

                    // Update button text and icon based on whether user has an ID card
                    const createUpdateBtn = document.getElementById('createUpdateBtn');
                    const createUpdateText = document.getElementById('createUpdateText');
                    const createUpdateIcon = document.getElementById('createUpdateIcon');

                    if (userData && userData.idCards) {
                        // User has an existing ID card
                        createUpdateText.textContent = 'Update ID Card';
                        createUpdateIcon.classList.remove('bi-plus-circle');
                        createUpdateIcon.classList.add('bi-pencil-square');
                        
                        // Show content
                        document.getElementById('idCardDisplay').classList.remove('d-none');
                        document.getElementById('idCardActions').classList.remove('d-none');
                        
                        // Update ID card information
                        const idCardInfo = document.getElementById('idCardInfo');
                        idCardInfo.innerHTML = `
                            <div class="mb-3">
                                <strong>PWD ID No:</strong> ${userData.idCards.pwdIdNo || 'N/A'}
                            </div>
                            <div class="mb-3">
                                <strong>Name:</strong> ${userData.firstName} ${userData.middleName ? userData.middleName.charAt(0) + '. ' : ''}${userData.lastName}${userData.suffix ? ', ' + userData.suffix : ''}
                            </div>
                            <div class="mb-3">
                                <strong>Disability Type:</strong> ${userData.disabilityType || 'N/A'}
                            </div>
                            <div class="mb-3">
                                <strong>Date Issued:</strong> ${userData.idCards.dateIssued || 'N/A'}
                            </div>
                            <div class="mb-3">
                                <strong>Expiration Date:</strong> ${userData.idCards.expirationDate || 'N/A'}
                            </div>
                        `;

                        // Update ID card status with enhanced visuals
                        const idCardStatus = document.getElementById('idCardStatus');
                        const expirationDate = new Date(userData.idCards.expirationDate);
                        const today = new Date();
                        const daysUntilExpiration = Math.ceil((expirationDate - today) / (1000 * 60 * 60 * 24));
                        
                        if (daysUntilExpiration < 0) {
                            idCardStatus.innerHTML = `
                                <div class="status-card expired">
                                    <i class="bi bi-x-circle-fill status-icon text-danger"></i>
                                    <h5 class="status-title text-danger">ID Card Expired</h5>
                                    <p class="status-message">Your ID card has expired. Please create a new one.</p>
                                    <div class="status-date">
                                        <i class="bi bi-calendar-x"></i> Expired on ${expirationDate.toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}
                                    </div>
                                </div>
                            `;
                        } else if (daysUntilExpiration <= 30) {
                            idCardStatus.innerHTML = `
                                <div class="status-card expiring">
                                    <i class="bi bi-exclamation-triangle-fill status-icon text-warning"></i>
                                    <h5 class="status-title text-warning">ID Card Expiring Soon</h5>
                                    <p class="status-message">Your ID card will expire in ${daysUntilExpiration} days. Please prepare to renew it.</p>
                                    <div class="status-date">
                                        <i class="bi bi-calendar-event"></i> Expires on ${expirationDate.toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}
                                    </div>
                                </div>
                            `;
                        } else {
                            idCardStatus.innerHTML = `
                                <div class="status-card active">
                                    <i class="bi bi-check-circle-fill status-icon text-success"></i>
                                    <h5 class="status-title text-success">ID Card Active</h5>
                                    <p class="status-message">Your ID card is valid and will expire in ${daysUntilExpiration} days.</p>
                                    <div class="status-date">
                                        <i class="bi bi-calendar-check"></i> Valid until ${expirationDate.toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}
                                    </div>
                                </div>
                            `;
                        }
                        
                        // Display front and back images
                        const frontCardPreview = document.getElementById('frontCardPreview');
                        const backCardPreview = document.getElementById('backCardPreview');

                        console.log('Front Image URL:', userData.idCards.frontID);
                        console.log('Back Image URL:', userData.idCards.backID);

                        // Display images using GitHub API
                        if (userData.idCards.frontID) {
                            try {
                                const frontBlobUrl = await getGitHubImage(userData.idCards.frontID);
                                frontCardPreview.innerHTML = `
                                    <div class="id-card-container">
                                        <img src="${frontBlobUrl}" alt="Front ID Card" class="img-fluid">
                                    </div>`;
                            } catch (error) {
                                console.error('Error loading front image:', error);
                                frontCardPreview.innerHTML = '<div class="alert alert-danger">Error loading front ID card image</div>';
                            }
                        }

                        if (userData.idCards.backID) {
                            try {
                                const backBlobUrl = await getGitHubImage(userData.idCards.backID);
                                backCardPreview.innerHTML = `
                                    <div class="id-card-container">
                                        <img src="${backBlobUrl}" alt="Back ID Card" class="img-fluid">
                                    </div>`;
                            } catch (error) {
                                console.error('Error loading back image:', error);
                                backCardPreview.innerHTML = '<div class="alert alert-danger">Error loading back ID card image</div>';
                            }
                        }

                        // Print button handler
                        document.getElementById('printIdBtn').onclick = async function() {
                            try {
                                if (userData.idCards.frontID && userData.idCards.backID) {
                                    const [frontBlobUrl, backBlobUrl] = await Promise.all([
                                        getGitHubImage(userData.idCards.frontID),
                                        getGitHubImage(userData.idCards.backID)
                                    ]);

                                    document.getElementById('printFrontImg').src = frontBlobUrl;
                                    document.getElementById('printBackImg').src = backBlobUrl;
                                    document.getElementById('printContainer').style.display = 'block';

                                    setTimeout(() => {
                                        window.print();
                                        setTimeout(() => {
                                            document.getElementById('printContainer').style.display = 'none';
                                            URL.revokeObjectURL(frontBlobUrl);
                                            URL.revokeObjectURL(backBlobUrl);
                                        }, 500);
                                    }, 500);
                                } else {
                                    alert('ID card images are not available for printing.');
                                }
                            } catch (error) {
                                console.error('Error preparing print:', error);
                                alert('Error preparing images for print. Please try again.');
                            }
                        };
                    } else {
                        // No existing ID card
                        createUpdateText.textContent = 'Create New ID Card';
                        createUpdateIcon.classList.remove('bi-pencil-square');
                        createUpdateIcon.classList.add('bi-plus-circle');
                        
                        // Show create ID button if no ID card exists
                        document.getElementById('idCardActions').classList.remove('d-none');
                        document.getElementById('printIdBtn').classList.add('d-none');
                    }
                } catch (error) {
                    console.error('Error loading ID card data:', error);
                    alert('Error loading ID card data. Please try again.');
                }
            });
        });

        // GitHub image fetching function
        async function getGitHubImage(imageUrl) {
            try {
                const urlParts = imageUrl.split('/main/');
                if (urlParts.length !== 2) {
                    throw new Error('Invalid GitHub URL format');
                }
                
                const imagePath = urlParts[1].split('?')[0];
                const { username, repo, token } = window.githubConfig;
                
                const response = await fetch(`https://api.github.com/repos/${username}/${repo}/contents/${imagePath}`, {
                    headers: {
                        'Authorization': `token ${token}`,
                        'Accept': 'application/vnd.github.v3.raw'
                    }
                });
                
                if (!response.ok) {
                    throw new Error(`GitHub API error: ${response.status}`);
                }
                
                const blob = await response.blob();
                return URL.createObjectURL(blob);
            } catch (error) {
                console.error('Error fetching image from GitHub:', error);
                throw error;
            }
        }
    </script>
} 